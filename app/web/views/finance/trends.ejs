<h1 class="h3 mb-2 text-gray-800"><%= title %></h1>
<div class="row">

    <div class="col-xl-12 col-lg-12">

        <!-- Area Chart -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Area Chart</h6>
            </div>
            <div class="card-body">
                
                    <div id="monthlySpendingChart"></d>
                
            </div>
        </div>
    </div>
</div>

<script>
    function number_format(number, decimals, dec_point, thousands_sep) {
        // *     example: number_format(1234.56, 2, ',', ' ');
        // *     return: '1 234,56'
        number = (number + '').replace(',', '').replace(' ', '');
        var n = !isFinite(+number) ? 0 : +number,
            prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
            sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
            dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
            s = '',
            toFixedFix = function (n, prec) {
                var k = Math.pow(10, prec);
                return '' + Math.round(n * k) / k;
            };
        // Fix for IE parseFloat(0.55).toFixed(0) = 0;
        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
        if (s[0].length > 3) {
            s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
        }
        if ((s[1] || '').length < prec) {
            s[1] = s[1] || '';
            s[1] += new Array(prec - s[1].length + 1).join('0');
        }
        return s.join(dec);
    }
    document.addEventListener('DOMContentLoaded', function () {
    const results = <%- JSON.stringify(grouped_spending) %>;

    // Create a list of all unique months and categories
    const months = [...new Set(results.map(result => result.month))].sort();
    const categories = [...new Set(results.map(result => result.category))];

    // Initialize an empty object for storing the data
    const data = {};

    // Iterate over the results
    results.forEach(result => {
        // Initialize an empty array for each category
        if (!data[result.category]) {
            data[result.category] = new Array(months.length).fill(0);
        }

        // Find the index of the month for this result
        const monthIndex = months.indexOf(result.month);

        // Store the amount at the correct index
        data[result.category][monthIndex] = result.amount;
    });

    const series = categories.map((category, index) => ({
        name: category,
        data: data[category],
    }));

    Highcharts.chart('monthlySpendingChart', {
        chart: {
            type: 'area'
        },
        title: {
            text: ''
        },
        xAxis: {
            categories: months,
            title: {
                text: 'Date'
            }
        },
        yAxis: {
            min: 0,
            title: {
                text: 'Amount'
            },
            stackLabels: {
                enabled: true,
                formatter: function () {
                    return '£' + Highcharts.numberFormat(this.total, 0, ',', ',');
                },
            },
            labels: {
                formatter: function () {
                    return '£' + Highcharts.numberFormat(this.value, 0, ',', ',');
                }
            },
        },
        tooltip: {
            formatter: function () {
                return `<b>${this.series.name}</b><br>${this.x}: £${Highcharts.numberFormat(this.y, 2, '.', ',')}`;
            },
        },
        plotOptions: {
            area: {
                stacking: "normal"
            },
            line: {
                fillOpacity: 0.3,
                marker: {
                    enabled: true,
                    radius: 3
                }
            },
            series: {
                events: {
                    legendItemClick: function (e) {
                        if (e.browserEvent.ctrlKey || e.browserEvent.metaKey) {
                            // Hide all series
                            this.chart.series.forEach(function (series) {
                                series.setVisible(false, false);
                            });
                            // Show only the clicked series
                            this.setVisible(true, false);
                            // Redraw the chart
                            this.chart.redraw();
                            return false; // Prevent the default toggle behavior
                        }
                    }
                }
            },
        },
        series: series
    });
});

</script>